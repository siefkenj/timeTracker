// Generated by CoffeeScript 1.9.1

/*
 * Helper Functions
 */
var END_TIME, START_TIME, adjustableRangeDirective, app, createFakeHangoutData, createHourList, formatName, getTotalHours, randRange, randSample, roundToHalf, timeColumnDirective, timeRangeToClassName, timeviewController,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

randRange = function(start, end) {
  if (start == null) {
    start = 0;
  }
  if (end == null) {
    end = 5;
  }
  return start + Math.floor(Math.random() * (end - start + 1));
};

randSample = function(array, samples) {
  var arrayCpy, i, j, ref, ret;
  arrayCpy = array.slice();
  ret = [];
  for (i = j = 0, ref = samples; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
    ret = ret.concat(arrayCpy.splice(randRange(0, arrayCpy.length - 1), 1));
  }
  return ret;
};

createFakeHangoutData = function(start, end, people) {
  var curr, day, endT, hangouts, j, len1, numHangouts, person, ret, segments, startT, todaysHangouts;
  if (start == null) {
    start = new Date(2015, 1, 1);
  }
  if (end == null) {
    end = new Date(2016, 1, 1);
  }
  if (people == null) {
    people = ['Andrei', 'Andrew', 'Jonah', 'Paul'];
  }
  ret = {};
  curr = new Date(start);
  while (curr <= end) {
    todaysHangouts = {};
    numHangouts = randRange(0, people.length);
    hangouts = randSample(people, numHangouts);
    for (j = 0, len1 = hangouts.length; j < len1; j++) {
      person = hangouts[j];
      day = [];
      segments = randRange(1, 2);
      if (segments > 1) {
        startT = randRange(0, 23);
        endT = randRange(startT + 1, 24);
        day.push({
          start: startT / 2,
          end: endT / 2
        });
        startT = randRange(endT + 1, 48);
        endT = randRange(startT + 1, 48);
        day.push({
          start: startT / 2,
          end: endT / 2
        });
      } else {
        startT = randRange(0, 48);
        endT = randRange(startT + 1, 48);
        day.push({
          start: startT / 2,
          end: endT / 2
        });
      }
      todaysHangouts[person] = {
        name: person,
        times: day
      };
    }
    ret[curr] = todaysHangouts;
    curr.setDate(curr.getDate() + 1);
  }
  return ret;
};

roundToHalf = function(t) {
  return Math.round(2 * t) / 2;
};

createHourList = function(start, end) {
  var hour, i, today;
  if (start == null) {
    start = -2;
  }
  if (end == null) {
    end = 24 + 4;
  }
  today = function(t) {
    if ((0 <= i && i <= 24)) {
      return "today";
    } else {
      return "not-today";
    }
  };
  hour = function(t) {
    return "" + (modulo(t, 12) === 0 ? 12 : modulo(t, 12)) + (modulo(t, 24) >= 12 ? 'pm' : 'am');
  };
  return (function() {
    var j, ref, ref1, results;
    results = [];
    for (i = j = ref = start, ref1 = end; ref <= ref1 ? j < ref1 : j > ref1; i = ref <= ref1 ? ++j : --j) {
      results.push({
        thisday: today(i),
        hour: hour(i)
      });
    }
    return results;
  })();
};

getTotalHours = function(p) {
  var j, len1, ref, t, total;
  total = 0;
  ref = p.times;
  for (j = 0, len1 = ref.length; j < len1; j++) {
    t = ref[j];
    total += t.end - t.start;
  }
  return total;
};

timeRangeToClassName = function(t) {
  var formatNum, len, start;
  formatNum = function(x) {
    if (modulo(x, 1) > 0) {
      return (Math.floor(x)) + "-5";
    } else {
      return (Math.floor(x)) + "-0";
    }
  };
  len = roundToHalf(t.end - t.start);
  start = roundToHalf(t.start);
  return "length-" + (formatNum(len)) + " start-" + (formatNum(start));
};

formatName = function(person) {
  return person.name + " (" + (getTotalHours(person)) + ")";
};

START_TIME = -2;

END_TIME = 24 + 3;


/*
 * START OF THE APP
 */

app = angular.module('App', []);


/*
 * TimeViewController
 */

timeviewController = function($scope) {
  $scope.people = {
    person1: {
      name: 'Andrei',
      times: [
        {
          start: 7,
          end: 14
        }, {
          start: 22,
          end: 26
        }
      ]
    },
    person2: {
      name: 'Jonah',
      times: [
        {
          start: 16,
          end: 18.5
        }
      ]
    }
  };
  $scope.getTotalHours = getTotalHours;
  $scope.timeRangeToClassName = timeRangeToClassName;
  $scope.formatName = formatName;
  $scope.hours = createHourList(START_TIME, END_TIME);
  console.log($scope.people);
};

adjustableRangeDirective = function() {
  return {
    link: function(scope, elm, attrs) {
      var oldHourChange, origTimeEnd, origTimeStart, startY;
      oldHourChange = null;
      startY = null;
      origTimeStart = scope.time.start;
      origTimeEnd = scope.time.end;
      interact($(elm).find('.top-handle')[0]).draggable({
        max: Infinity
      }).on('dragstart', function(evt) {
        startY = evt.pageY;
        return origTimeStart = scope.time.start;
      }).on('dragmove', function(evt) {
        var delta, hourChange;
        delta = startY - evt.pageY;
        hourChange = roundToHalf(delta / 23);
        if (hourChange !== oldHourChange) {
          oldHourChange = hourChange;
          scope.time.start = origTimeStart - hourChange;
          return scope.$apply();
        }
      });
      return interact($(elm).find('.bottom-handle')[0]).draggable({
        max: Infinity
      }).on('dragstart', function(evt) {
        startY = evt.pageY;
        return origTimeEnd = scope.time.end;
      }).on('dragmove', function(evt) {
        var delta, hourChange;
        delta = startY - evt.pageY;
        hourChange = roundToHalf(delta / 23);
        if (hourChange !== oldHourChange) {
          oldHourChange = hourChange;
          scope.time.end = origTimeEnd - hourChange;
          return scope.$apply();
        }
      });
    }
  };
};

timeColumnDirective = function() {
  return {
    link: function(scope, elm, attrs) {
      return console.log('linking!!', scope.person);
    }
  };
};

app.controller('TimeViewController', ['$scope', timeviewController]);

app.directive('adjustableRange', adjustableRangeDirective);

app.directive('timeColumn', adjustableRangeDirective);
