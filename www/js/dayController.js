// Generated by CoffeeScript 1.9.2

/*
 * START OF THE APP
 */
var END_TIME, START_TIME, app, createHourList, dayController, dayTableWidget, hourspanWidget, onLastRepeat, roundToHalf,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

app = angular.module('dayControllers', []);


/*
 * DayController
 */

START_TIME = -2;

END_TIME = 24 + 2;

dayController = function($scope, $routeParams, dataService) {
  var dataChanged, updatePeople;
  window.ds = dataService;
  $scope.year = $routeParams.year;
  $scope.month = $routeParams.month;
  $scope.day = $routeParams.day;
  $scope.hours = createHourList(START_TIME, END_TIME);
  updatePeople = function() {
    return dataService.get($routeParams.year, $routeParams.month, $routeParams.day).then(function(dayData) {
      return $scope.people = dayData;
    });
  };
  $scope.people = [
    {
      name: 'Andrew',
      times: [
        {
          start: 10,
          end: 12
        }, {
          start: 4,
          end: 8
        }
      ]
    }, {
      name: 'Seth',
      times: [
        {
          start: 4,
          end: 8
        }
      ]
    }, {
      name: 'Paul',
      times: [
        {
          start: 14,
          end: 15.5
        }
      ]
    }
  ];
  $scope.possibleNames = [];
  dataService.getPossibleNames().then(function(names) {
    return $scope.possibleNames = names;
  });
  $scope.showNewPersonDialog = false;
  $scope.newPerson = function() {
    return $scope.showNewPersonDialog = true;
  };
  $scope.addPerson = function(person) {
    var promise;
    promise = dataService.addPersonToDay({
      year: $routeParams.year,
      month: $routeParams.month,
      day: $routeParams.day,
      person: {
        name: person
      }
    });
    return promise.then(function() {
      return updatePeople();
    });
  };
  dataChanged = function() {
    return dataService.setDayData({
      year: $routeParams.year,
      month: $routeParams.month,
      day: $routeParams.day,
      data: $scope.people
    });
  };
  $scope.$watch('people', dataChanged, true);
};

app.controller('DayController', ['$scope', '$routeParams', 'dataService', dayController]);


/*
 * Widgets
 */

dayTableWidget = function() {
  return {
    templateUrl: 'day-table.tmpl.html',
    restrict: 'E',
    scope: {
      people: '=',
      hours: '='
    },
    link: function(scope, element, attr) {
      return scope.container = element;
    },
    controller: function($scope) {
      $scope.offsets = {};
      $scope.hourHeight = 20;
      $scope.computeOffsets = function() {
        var col, hour, j, k, len, person, ref, ref1, ref2, row, tops;
        tops = {};
        for (hour = j = ref = START_TIME, ref1 = END_TIME; ref <= ref1 ? j <= ref1 : j >= ref1; hour = ref <= ref1 ? ++j : --j) {
          row = $scope.container.find("[x-hour=\"" + hour + "\"]")[0];
          if (row) {
            tops[hour] = row.offsetTop;
          }
        }
        ref2 = $scope.people;
        for (k = 0, len = ref2.length; k < len; k++) {
          person = ref2[k];
          col = $scope.container.find("[x-name=\"" + person.name + "\"]")[0];
          if (col == null) {
            return;
          }
          $scope.offsets[person.name] = {
            left: col.offsetLeft,
            width: col.offsetWidth,
            tops: tops
          };
        }
        $scope.hourHeight = tops[1] - tops[0] || $scope.hourHeight;
        return $scope.offsets;
      };
      $scope.getOffsets = function(name, hourSpan) {
        var hours, interpolateTime, maxHour, minHour, offsets, ret;
        if (!$scope.offsets[name]) {
          ret = {
            left: 10,
            width: 50,
            bottom: hourSpan.end * 20,
            top: hourSpan.start * 20
          };
          return ret;
        }
        interpolateTime = function(hour, values) {
          var decimal, delta, x1, x2;
          x1 = Math.floor(hour);
          x2 = Math.ceil(hour);
          if (x1 === x2) {
            return values[hour];
          }
          if (!((values[x1] != null) && values[x2])) {
            return void 0;
          }
          delta = values[x2] - values[x1];
          decimal = hour - x1;
          return values[x1] + decimal * delta;
        };
        offsets = $scope.offsets[name];
        hours = Object.keys(offsets.tops);
        minHour = Math.min.apply(Math, hours);
        maxHour = Math.max.apply(Math, hours);
        ret = {
          left: offsets.left,
          width: offsets.width,
          bottom: offsets.tops[maxHour],
          top: offsets.tops[minHour]
        };
        ret.bottom = interpolateTime(hourSpan.end, offsets.tops) || ret.bottom;
        ret.top = interpolateTime(hourSpan.start, offsets.tops) || ret.top;
        return ret;
      };
      $scope.computeValidTimeRange = function(person, initTime, ignoreRange) {
        var end, i, start, useableIntervals;
        if (ignoreRange == null) {
          ignoreRange = {};
        }
        useableIntervals = (function() {
          var j, len, ref, results;
          ref = person.times;
          results = [];
          for (j = 0, len = ref.length; j < len; j++) {
            i = ref[j];
            if (i.start !== ignoreRange.start && i.end !== ignoreRange.end) {
              results.push(i);
            }
          }
          return results;
        })();
        end = Math.min.apply(null, (function() {
          var j, len, results;
          results = [];
          for (j = 0, len = useableIntervals.length; j < len; j++) {
            i = useableIntervals[j];
            if (i.start >= initTime) {
              results.push(i.start);
            }
          }
          return results;
        })());
        end = Math.min(26, end);
        start = Math.max.apply(null, (function() {
          var j, len, results;
          results = [];
          for (j = 0, len = useableIntervals.length; j < len; j++) {
            i = useableIntervals[j];
            if (i.end <= initTime) {
              results.push(i.end);
            }
          }
          return results;
        })());
        start = Math.max(-3, start);
        return {
          start: start,
          end: end
        };
      };
      $scope.$on('onLastRepeat', function() {
        $scope.computeOffsets();
        return $scope.$broadcast('offsetsComputed', $scope.offsets);
      });
      window.sss = $scope;
    }
  };
};

app.directive('dayTable', dayTableWidget);

hourspanWidget = function() {
  return {
    templateUrl: 'hourspan.tmpl.html',
    restrict: 'E',
    scope: {
      span: '=',
      person: '='
    },
    link: function(scope, elm, attr) {
      var bottom, bounds, oldHourChange, origTimeEnd, origTimeStart, startY, top;
      scope.container = elm.find('.hourspan-container');
      oldHourChange = null;
      startY = null;
      origTimeStart = scope.span.start;
      origTimeEnd = scope.span.end;
      bounds = scope.$parent.computeValidTimeRange(scope.person, (origTimeStart + origTimeEnd) / 2, {
        start: origTimeStart,
        end: origTimeEnd
      });
      top = interact($(elm).find('.drag-handle.top')[0]);
      top.draggable({
        max: Infinity
      });
      top.on('dragstart', function(evt) {
        startY = evt.pageY;
        origTimeStart = scope.span.start;
        origTimeEnd = scope.span.end;
        return bounds = scope.$parent.computeValidTimeRange(scope.person, (origTimeStart + origTimeEnd) / 2, {
          start: origTimeStart,
          end: origTimeEnd
        });
      });
      top.on('dragmove', function(evt) {
        var delta, hourChange, hourHeight, startHour;
        hourHeight = scope.$parent.hourHeight;
        delta = startY - evt.pageY;
        hourChange = roundToHalf(delta / hourHeight);
        if (hourChange !== oldHourChange) {
          oldHourChange = hourChange;
          startHour = origTimeStart - hourChange;
          startHour = Math.max(startHour, bounds.start);
          startHour = Math.min(startHour, origTimeEnd - .5);
          scope.span.start = startHour;
          return scope.$apply();
        }
      });
      bottom = interact($(elm).find('.drag-handle.bottom')[0]);
      bottom.draggable({
        max: Infinity
      });
      bottom.on('dragstart', function(evt) {
        startY = evt.pageY;
        origTimeEnd = scope.span.end;
        origTimeStart = scope.span.start;
        return bounds = scope.$parent.computeValidTimeRange(scope.person, (origTimeStart + origTimeEnd) / 2, {
          start: origTimeStart,
          end: origTimeEnd
        });
      });
      bottom.on('dragmove', function(evt) {
        var delta, endHour, hourChange, hourHeight;
        hourHeight = scope.$parent.hourHeight;
        delta = startY - evt.pageY;
        hourChange = roundToHalf(delta / hourHeight);
        if (hourChange !== oldHourChange) {
          oldHourChange = hourChange;
          endHour = origTimeEnd - hourChange;
          endHour = Math.min(endHour, bounds.end);
          endHour = Math.max(endHour, origTimeStart + .5);
          scope.span.end = endHour;
          return scope.$apply();
        }
      });
    },
    controller: function($scope) {
      var resize;
      resize = function() {
        var css, offests;
        offests = $scope.$parent.getOffsets($scope.person.name, $scope.span);
        css = {
          left: offests.left,
          width: offests.width,
          height: offests.bottom - offests.top,
          top: offests.top
        };
        return $scope.container.css(css);
      };
      $scope.$watch('span', resize, true);
      return $scope.$on('offsetsComputed', function() {
        return resize();
      });
    }
  };
};

app.directive('hourspan', hourspanWidget);

onLastRepeat = function() {
  return {
    restrict: 'A',
    link: function(scope, element, attr) {
      if (scope.$last) {
        return window.setTimeout(function() {
          return scope.$emit('onLastRepeat', element, attr);
        });
      }
    }
  };
};

app.directive('onLastRepeat', onLastRepeat);


/*
 * Helper functions
 */

createHourList = function(start, end) {
  var hour, i, today;
  if (start == null) {
    start = -2;
  }
  if (end == null) {
    end = 24 + 4;
  }
  today = function(t) {
    if ((0 <= i && i < 24)) {
      return "today";
    } else {
      return "not-today";
    }
  };
  hour = function(t) {
    return "" + (modulo(t, 12) === 0 ? 12 : modulo(t, 12)) + (modulo(t, 24) >= 12 ? 'pm' : 'am');
  };
  return (function() {
    var j, ref, ref1, results;
    results = [];
    for (i = j = ref = start, ref1 = end; ref <= ref1 ? j < ref1 : j > ref1; i = ref <= ref1 ? ++j : --j) {
      results.push({
        thisday: today(i),
        hour: hour(i),
        time: i
      });
    }
    return results;
  })();
};

roundToHalf = function(t) {
  return Math.round(2 * t) / 2;
};
