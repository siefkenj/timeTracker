// Generated by CoffeeScript 1.9.1

/*
 * START OF THE APP
 */

(function() {
  var END_TIME, START_TIME, app, createHourList, dayController, dayTableWidget, hourspanWidget, newpersondialog, onLastRepeat, roundToHalf,
    modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

  app = angular.module('dayControllers', []);


  /*
   * DayController
   */

  START_TIME = -2;

  END_TIME = 24 + 2;

  dayController = function($scope, $routeParams, dataService) {
    var dataChanged, updatePeople;
    window.ds = dataService;
    $scope.year = $routeParams.year;
    $scope.month = $routeParams.month;
    $scope.day = $routeParams.day;
    $scope.date = new Date($scope.year, $scope.month - 1, $scope.day);
    $scope.getHumanReadableDate = function() {
      var str;
      str = $scope.date.toLocaleString('en-US', {
        weekday: 'long',
        month: 'long',
        day: 'numeric'
      });
      return str + " (" + $scope.year + ")";
    };
    $scope.getURLforDay = function(offset) {
      var date;
      if (offset == null) {
        offset = 0;
      }
      date = new Date(+$scope.year, +$scope.month - 1, +$scope.day + offset);
      return "#/day/" + (date.getFullYear()) + "/" + (date.getMonth() + 1) + "/" + (date.getDate());
    };
    $scope.hours = createHourList(START_TIME, END_TIME);
    updatePeople = function() {
      return dataService.get($routeParams.year, $routeParams.month, $routeParams.day).then(function(dayData) {
        return $scope.people = dayData;
      });
    };
    $scope.people = {};
    updatePeople();
    $scope.possibleNames = [];
    dataService.getPossibleNames().then(function(names) {
      return $scope.possibleNames = names;
    });
    $scope.showNewPersonDialog = false;
    $scope.addPerson = function(person) {
      var promise;
      promise = dataService.addPersonToDay({
        year: $routeParams.year,
        month: $routeParams.month,
        day: $routeParams.day,
        person: {
          name: person
        }
      });
      return promise.then(function() {
        return updatePeople();
      });
    };
    dataChanged = function() {
      return dataService.setDayData({
        year: $routeParams.year,
        month: $routeParams.month,
        day: $routeParams.day,
        data: $scope.people
      });
    };
    $scope.$watch('people', dataChanged, true);
    $scope.addPersonDialogShow = function() {
      return $scope.showNewPersonDialog = true;
    };
  };

  app.controller('DayController', ['$scope', '$routeParams', 'dataService', dayController]);


  /*
   * Widgets
   */

  dayTableWidget = function() {
    return {
      templateUrl: 'day-table.tmpl.html',
      restrict: 'E',
      scope: {
        people: '=',
        hours: '='
      },
      link: function(scope, elm, attr) {
        scope.container = elm;
        scope.hoverElm = $(elm).find('.new-hourspan-hover');
        $(elm).on('click', function(evt) {
          var hour, name, parent, person, target;
          target = evt.target;
          parent = $(target).closest('.hour[x-name]')[0];
          if (parent != null) {
            name = parent.getAttribute('x-name');
            hour = parseInt(parent.getAttribute('x-hour'), 10);
            person = scope.people[name];
            scope.newTime(person, hour);
            scope.showHover = false;
            return scope.$apply();
          }
        });
        $(elm).on('mousemove', function(evt) {
          var oldHover, parent, target;
          target = evt.target;
          oldHover = scope.showHover;
          parent = $(target).closest('.hour[x-name]')[0];
          if (parent != null) {
            if (!$(target).closest('.new-hourspan-hover')[0]) {
              $(target).append(scope.hoverElm);
            }
            scope.showHover = true;
          } else {
            scope.showHover = false;
          }
          if (!$(parent).hasClass('hoverable')) {
            scope.showHover = false;
          }
          if (oldHover !== scope.showHover) {
            return scope.$apply();
          }
        });
        return $(elm).on('mouseleave', function(evt) {
          var oldHover;
          oldHover = scope.showHover;
          scope.showHover = false;
          if (oldHover !== scope.showHover) {
            return scope.$apply();
          }
        });
      },
      controller: function($scope) {
        $scope.showHover = false;
        $scope.offsets = {};
        $scope.hourHeight = 20;
        $scope.computeOffsets = function() {
          var _, col, hour, j, person, ref, ref1, ref2, row, tops;
          tops = {};
          for (hour = j = ref = START_TIME, ref1 = END_TIME; ref <= ref1 ? j <= ref1 : j >= ref1; hour = ref <= ref1 ? ++j : --j) {
            row = $scope.container.find("[x-hour=\"" + hour + "\"]")[0];
            if (row) {
              tops[hour] = row.offsetTop;
            }
          }
          $scope.offsets['_tops'] = tops;
          ref2 = $scope.people;
          for (_ in ref2) {
            person = ref2[_];
            col = $scope.container.find("[x-name=\"" + person.name + "\"]")[0];
            if (col == null) {
              return;
            }
            $scope.offsets[person.name] = {
              left: col.offsetLeft,
              width: col.offsetWidth,
              tops: tops
            };
          }
          $scope.hourHeight = tops[1] - tops[0] || $scope.hourHeight;
          return $scope.offsets;
        };
        $scope.getOffsets = function(name, hourSpan) {
          var hours, interpolateTime, maxHour, minHour, offsets, ret;
          offsets = $scope.offsets[name];
          if (!offsets) {
            offsets = {
              tops: $scope.offsets['_tops']
            };
            if (Object.keys(offsets.tops || {}).length === 0) {
              ret = {
                left: 10,
                width: 50,
                bottom: hourSpan.end * 20,
                top: hourSpan.start * 20
              };
              return ret;
            }
          }
          interpolateTime = function(hour, values) {
            var decimal, delta, x1, x2;
            x1 = Math.floor(hour);
            x2 = Math.ceil(hour);
            if (x1 === x2) {
              return values[hour];
            }
            if (!((values[x1] != null) && values[x2])) {
              return void 0;
            }
            delta = values[x2] - values[x1];
            decimal = hour - x1;
            return values[x1] + decimal * delta;
          };
          hours = Object.keys(offsets.tops);
          minHour = Math.min.apply(Math, hours);
          maxHour = Math.max.apply(Math, hours);
          ret = {
            left: offsets.left,
            width: offsets.width,
            bottom: offsets.tops[maxHour],
            top: offsets.tops[minHour]
          };
          ret.bottom = interpolateTime(hourSpan.end, offsets.tops) || ret.bottom;
          ret.top = interpolateTime(hourSpan.start, offsets.tops) || ret.top;
          return ret;
        };
        $scope.computeValidTimeRange = function(person, initTime, ignoreRange) {
          var end, i, start, useableIntervals;
          if (ignoreRange == null) {
            ignoreRange = {};
          }
          useableIntervals = (function() {
            var j, len, ref, results;
            ref = person.times;
            results = [];
            for (j = 0, len = ref.length; j < len; j++) {
              i = ref[j];
              if (i.start !== ignoreRange.start && i.end !== ignoreRange.end) {
                results.push(i);
              }
            }
            return results;
          })();
          end = Math.min.apply(null, (function() {
            var j, len, results;
            results = [];
            for (j = 0, len = useableIntervals.length; j < len; j++) {
              i = useableIntervals[j];
              if (i.start >= initTime) {
                results.push(i.start);
              }
            }
            return results;
          })());
          end = Math.min(26, end);
          start = Math.max.apply(null, (function() {
            var j, len, results;
            results = [];
            for (j = 0, len = useableIntervals.length; j < len; j++) {
              i = useableIntervals[j];
              if (i.end <= initTime) {
                results.push(i.end);
              }
            }
            return results;
          })());
          start = Math.max(-3, start);
          return {
            start: start,
            end: end
          };
        };
        $scope.newTime = function(person, hour, defaultDuration) {
          var newRange, range;
          if (defaultDuration == null) {
            defaultDuration = 2;
          }
          range = $scope.computeValidTimeRange(person, hour);
          newRange = {
            start: hour,
            end: hour + defaultDuration
          };
          newRange.end = Math.min(newRange.end, range.end);
          newRange.start = newRange.end - defaultDuration;
          newRange.start = Math.max(newRange.start, range.start);
          person.times.push(newRange);
        };
        $scope.$on('onLastRepeat', function() {
          $scope.lastRepeatDone = true;
          $scope.computeOffsets();
          return $scope.$broadcast('offsetsComputed', $scope.offsets);
        });
        $scope.makeHoverable = function(choice) {
          if (choice == null) {
            choice = true;
          }
          if (choice) {
            $($scope.container).find('.hour[x-name]').addClass('hoverable');
          } else {
            $($scope.container).find('.hour[x-name]').removeClass('hoverable');
          }
        };
        $scope.addPerson = function() {
          return $scope.$parent.addPersonDialogShow();
        };
        window.sss = $scope;
      }
    };
  };

  app.directive('dayTable', dayTableWidget);

  hourspanWidget = function() {
    return {
      templateUrl: 'hourspan.tmpl.html',
      restrict: 'E',
      scope: {
        span: '=',
        person: '='
      },
      link: function(scope, elm, attr) {
        var bottom, bounds, oldHourChange, origTimeEnd, origTimeStart, startY, top, topDragEnd, topDragMove, topDragStart;
        scope.container = elm.find('.hourspan-container');
        oldHourChange = null;
        startY = null;
        origTimeStart = scope.span.start;
        origTimeEnd = scope.span.end;
        bounds = scope.$parent.computeValidTimeRange(scope.person, (origTimeStart + origTimeEnd) / 2, {
          start: origTimeStart,
          end: origTimeEnd
        });
        top = interact($(elm).find('.drag-handle.top')[0]);
        top.draggable({
          max: Infinity
        });
        topDragStart = function(evt) {
          startY = evt.pageY;
          origTimeStart = scope.span.start;
          origTimeEnd = scope.span.end;
          bounds = scope.$parent.computeValidTimeRange(scope.person, (origTimeStart + origTimeEnd) / 2, {
            start: origTimeStart,
            end: origTimeEnd
          });
          return scope.$parent.makeHoverable(false);
        };
        topDragMove = function(evt) {
          var delta, hourChange, hourHeight, startHour;
          evt.preventDefault();
          hourHeight = scope.$parent.hourHeight;
          delta = startY - evt.pageY;
          hourChange = roundToHalf(delta / hourHeight);
          if (hourChange !== oldHourChange) {
            oldHourChange = hourChange;
            startHour = origTimeStart - hourChange;
            startHour = Math.max(startHour, bounds.start);
            startHour = Math.min(startHour, origTimeEnd - .5);
            scope.span.start = startHour;
            return scope.$apply();
          }
        };
        topDragEnd = function(evt) {
          return scope.$parent.makeHoverable(true);
        };
        top.on('dragstart', topDragStart);
        top.on('dragend', topDragEnd);
        top.on('dragmove', topDragMove);
        top = interact($(elm).find('.remove-button')[0]);
        top.draggable({
          max: Infinity
        });
        top.on('dragstart', topDragStart);
        top.on('dragend', topDragEnd);
        top.on('dragmove', topDragMove);
        bottom = interact($(elm).find('.drag-handle.bottom')[0]);
        bottom.draggable({
          max: Infinity
        });
        bottom.on('dragstart', function(evt) {
          startY = evt.pageY;
          origTimeEnd = scope.span.end;
          origTimeStart = scope.span.start;
          bounds = scope.$parent.computeValidTimeRange(scope.person, (origTimeStart + origTimeEnd) / 2, {
            start: origTimeStart,
            end: origTimeEnd
          });
          return scope.$parent.makeHoverable(false);
        });
        bottom.on('dragend', function(evt) {
          return scope.$parent.makeHoverable(true);
        });
        bottom.on('dragmove', function(evt) {
          var delta, endHour, hourChange, hourHeight;
          evt.preventDefault();
          hourHeight = scope.$parent.hourHeight;
          delta = startY - evt.pageY;
          hourChange = roundToHalf(delta / hourHeight);
          if (hourChange !== oldHourChange) {
            oldHourChange = hourChange;
            endHour = origTimeEnd - hourChange;
            endHour = Math.min(endHour, bounds.end);
            endHour = Math.max(endHour, origTimeStart + .5);
            scope.span.end = endHour;
            return scope.$apply();
          }
        });
      },
      controller: function($scope) {
        var resize;
        resize = function() {
          var css, height, offests;
          offests = $scope.$parent.getOffsets($scope.person.name, $scope.span);
          height = offests.bottom - offests.top;
          css = {
            height: height,
            top: offests.top
          };
          $scope.container.css(css);
          if (height < 50) {
            return $scope.container.addClass('compact');
          } else {
            return $scope.container.removeClass('compact');
          }
        };
        $scope.remove = function() {
          var i, j, len, r, ref, removeIndex;
          ref = $scope.person.times;
          for (i = j = 0, len = ref.length; j < len; i = ++j) {
            r = ref[i];
            if (r.start === $scope.span.start && r.end === $scope.span.end) {
              removeIndex = i;
            }
          }
          if (removeIndex != null) {
            $scope.person.times.splice(removeIndex, 1);
          }
          if ($scope.person.times.length === 0) {
            delete $scope.$parent.people[$scope.person.name];
          }
        };
        $scope.$watch('span', resize, true);
        return $scope.$on('offsetsComputed', resize);
      }
    };
  };

  app.directive('hourspan', hourspanWidget);

  newpersondialog = function() {
    return {
      templateUrl: 'newpersondialog.tmpl.html',
      restrict: 'E',
      scope: {
        possibleNames: '=',
        modalShow: '=',
        addPerson: '='
      },
      link: function(scope, elm, attr) {
        scope.container = elm;
        scope.modal = $(elm).find('.modal');
        scope.select = $(elm).find('input').selectize({
          create: true,
          createOnBlur: true
        });
        scope.select[0].selectize.on('change', function(value) {
          var values;
          values = value.split(',');
          return scope.newNames = values;
        });
      },
      controller: function($scope) {
        $scope.newNames = [];
        $scope.$watch('possibleNames', function() {
          var j, len, name, ref;
          ref = $scope.possibleNames || [];
          for (j = 0, len = ref.length; j < len; j++) {
            name = ref[j];
            $scope.select[0].selectize.addOption({
              value: name,
              text: name
            });
          }
          return $scope.select[0].selectize.refreshOptions();
        });
        $scope.$watch('modalShow', function() {
          if ($scope.modalShow) {
            return $scope.modal.modal('show');
          } else {
            return $scope.modal.modal('hide');
          }
        });
        $scope.hide = function() {
          return $scope.modalShow = false;
        };
        $scope.addPersonClick = function(nameList) {
          var j, len, name;
          for (j = 0, len = nameList.length; j < len; j++) {
            name = nameList[j];
            console.log("you want to add " + name);
            if (typeof $scope.addPerson === "function") {
              $scope.addPerson(name);
            }
          }
          $scope.showDialog = false;
          return $scope.select[0].selectize.clear();
        };
        return $scope.clickedName = function(name) {
          $scope.addPersonClick([name]);
          return $scope.hide();
        };
      }
    };
  };

  app.directive('newpersondialog', newpersondialog);

  onLastRepeat = function() {
    return {
      restrict: 'A',
      link: function(scope, element, attr) {
        if (scope.$last) {
          return window.setTimeout(function() {
            return scope.$emit('onLastRepeat', element, attr);
          });
        }
      }
    };
  };

  app.directive('onLastRepeat', onLastRepeat);


  /*
   * Helper functions
   */

  createHourList = function(start, end) {
    var hour, i, today;
    if (start == null) {
      start = -2;
    }
    if (end == null) {
      end = 24 + 4;
    }
    today = function(t) {
      if ((0 <= i && i < 24)) {
        return "today";
      } else {
        return "not-today";
      }
    };
    hour = function(t) {
      return "" + (modulo(t, 12) === 0 ? 12 : modulo(t, 12)) + (modulo(t, 24) >= 12 ? 'pm' : 'am');
    };
    return (function() {
      var j, ref, ref1, results;
      results = [];
      for (i = j = ref = start, ref1 = end; ref <= ref1 ? j < ref1 : j > ref1; i = ref <= ref1 ? ++j : --j) {
        results.push({
          thisday: today(i),
          hour: hour(i),
          time: i
        });
      }
      return results;
    })();
  };

  roundToHalf = function(t) {
    return Math.round(2 * t) / 2;
  };

}).call(this);
